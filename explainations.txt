Question 01:
Confirming Inputs: two strings s and t

Test Cases: Test case 1: ("udacity", "ad") | Test case 2: ("udacity", " ") | Test case 3: ("udacity", "so")
Brainstorm: 

Runtime analysis: We use sort which is merge sorting O(nlogn). The space complexity of this should be O(1).

Coding: 





Question 02:
Confirming inputs: string a

Test Cases: Test case 1: ("") | Test case 2: ("racecar") | Test case 3: ("udacity")

Brainstorm: Need a nested forloop to cycle through the letters in the string. Need to check the length of the subString to figure out which is the longest.

Runtime analysis: Runtime is O(n^2) because its two forloops. Space Complexity is O(1)

Coding: Check if the input is a string. We need a forloop that goes the length of the string and a nested forloop that increments the same range but starts and ends one after the previous forloop and store the values in a subString variable. Check to see if the substring is an palindromic and if it is the longest substring at the moment and storing it in a longest subString array. Return the value of the longestSubString.





Question 03:
Confirming inputs: Undirected Graph G

Test Cases: Input value is not a dictionary/empty, length of G is less than 2 so there is no connection between two nodes

Brainstorm: From the keywords of undirected graph and minimum spanning tree I deduced that I can use the logic behind Kruskal's Minimum Spanning Tree Algorithm. First I need to sort the edges by weight. Then pick the smallest edges one by one but making sure no cycles form

Runtime analysis:

Coding:

Debug:




Question 04:
Confirming inputs: matrix of tree T, non-negative number representing the root r, non negative integers for two nodes n1 and n2

Test Cases: 

Brainstorm: 

Runtime analysis:

Coding:

Debug:




Question 05:
Confirming inputs: Link list LL and integer value m for elements from the end of the linked list

Test Cases: 

Brainstorm: 

Runtime analysis:

Coding:

Debug:





